@page "/taskdetail/{id:int}"
@using Client.Services
@inject NavigationManager Navigation
@inject TaskService TaskService
@inject HttpClient _http

<h3>タスク詳細</h3>

@if (Task == null)
{
    <p>読み込み中...</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr class="text-center">
                <th>名称</th>
                <th>担当</th>
                <th>内容</th>
                <th>開始日</th>
                <th>期限</th>
                <th>終了日</th>
            </tr>
        </thead>
        <tbody>
            <tr class="align-middle">
                <td>@Task.Name</td>
                <td>@Task.Assignee</td>
                <td>@Task.Description</td>
                <td>@(Task.StartDate?.ToString("yyyy/MM/dd") ?? "N/A")</td>
                <td>@(Task.DueDate?.ToString("yyyy/MM/dd") ?? "N/A")</td>
                <td>@(Task.CompletionDate?.ToString("yyyy/MM/dd") ?? "N/A")</td>
                <td class="d-flex justify-content-evenly">
                    <a href="/edit/@Task.Id" class="btn btn-warning">編集</a>
                    <a @onclick="() => DeleteTask(Task.Id)" class="btn btn-danger">削除</a>
                </td>
            </tr>
        </tbody>
    </table>
    <a @onclick="GoBack" class="btn btn-primary">戻る</a>
}

@code {
    [Parameter] public int id { get; set; }
    private Models.Task Task;

    protected override async Task OnInitializedAsync()
    {
        Task = await TaskService.GetTaskByIdAsync(id);
    }

    private async Task DeleteTask(int id)
    {
        await TaskService.DeleteTaskAsync(id);
        Navigation.NavigateTo("/taskslist");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/taskslist");
    }
}
